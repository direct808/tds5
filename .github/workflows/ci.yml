name: PR Checks

on:
  #  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - main
      - ci # твоя ветка разработки пайплайна

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    #    outputs:
    #      image-tag: ${{ steps.meta.outputs.image-tag }}

    services:
      docker:
        image: docker:dind
        options: --privileged --shm-size=2g
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
      container:
        image: ubuntu:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #      - name: Generate unique image tag
      #        id: meta
      #        run: echo "image-tag=app-image-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
      #
      - name: Build Docker image
        run: |
          docker build -t tds5 --target builder .

      - name: Lint
        run: |
          docker run tds5 yarn run lint

      - name: Unit tests
        run: |
          docker run tds5 yarn run test

      - name: Test Docker
        run: |
          docker version
          docker info

      - name: e2e tests
        run: |
          docker run tds5 yarn run test:e2e
#        env:
          # Важные переменные для работы Testcontainers
#          DOCKER_HOST: tcp://localhost:2375
#          DOCKER_TLS_VERIFY: ""
#
#      - name: Save image as tarball
#        run: |
#          docker save app-image:${{ steps.meta.outputs.image-tag }} | gzip > image.tar.gz
#
#      - name: Upload Docker image artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: docker-image
#          path: image.tar.gz

#  lint:
#    name: Run Linter
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Download Docker image
#        uses: actions/download-artifact@v4
#        with:
#          name: docker-image
#
#      - name: Load Docker image
#        run: gunzip -c image.tar.gz | docker load
#
#      - name: Run ESLint
#        run: docker run --rm app-image-${{ needs.build.outputs.image-tag }} npm run lint
#
#  unit-tests:
#    name: Run Unit Tests
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Download Docker image
#        uses: actions/download-artifact@v4
#        with:
#          name: docker-image
#
#      - name: Load Docker image
#        run: gunzip -c image.tar.gz | docker load
#
#      - name: Run Unit Tests
#        run: docker run --rm app-image-${{ needs.build.outputs.image-tag }} npm run test
#
#  e2e-tests:
#    name: Run E2E Tests
#    runs-on: ubuntu-latest
#    needs: build
#
#    services:
#      postgres:
#        image: postgres:15
#        env:
#          POSTGRES_USER: test
#          POSTGRES_PASSWORD: test
#          POSTGRES_DB: test_db
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd="pg_isready"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=5
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Download Docker image
#        uses: actions/download-artifact@v4
#        with:
#          name: docker-image
#
#      - name: Load Docker image
#        run: gunzip -c image.tar.gz | docker load
#
#      - name: Run E2E Tests
#        env:
#          DB_HOST: host.docker.internal
#          DB_PORT: 5432
#          DB_USER: test
#          DB_PASSWORD: test
#          DB_NAME: test_db
#        run: |
#          docker run --rm \
#            -e DB_HOST=$DB_HOST \
#            -e DB_PORT=$DB_PORT \
#            -e DB_USER=$DB_USER \
#            -e DB_PASSWORD=$DB_PASSWORD \
#            -e DB_NAME=$DB_NAME \
#            app-image-${{ needs.build.outputs.image-tag }} \
#            npm run test:e2e
